{"version":3,"sources":["components/sounds/Guitar_Chords_-_A_major_1.mp3","components/sounds/Guitar_Chords_-_B_major_1.mp3","components/sounds/Guitar_Chords_-_C_major_1.mp3","components/sounds/Guitar_Chords_-_D_major_1.mp3","components/sounds/Guitar_Chords_-_E_major_1.mp3","components/sounds/Guitar_Chords_-_F_major_1.mp3","components/sounds/Guitar_Chords_-_G_major_1.mp3","components/sounds/Guitar_Chords_-_A_minor_1.mp3","components/sounds/Guitar_Chords_-_B_minor_1.mp3","components/sounds/Guitar_Chords_-_C_minor_1.mp3","components/sounds/Guitar_Chords_-_D_minor_1.mp3","components/sounds/Guitar_Chords_-_E_minor_1.mp3","components/sounds/Guitar_Chords_-_F_minor_1.mp3","components/sounds/Guitar_Chords_-_G_minor_1.mp3","components/variationData.js","components/ChordContainer.js","components/chordData.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","chordVar","chord","src","id","chordsArray","Maj1","Maj2","Maj3","Maj4","Maj5","Maj6","Maj7","minorChordsArray","Min1","Min2","Min3","Min4","Min5","Min6","Min7","audioArray","map","Audio","minorAudioArray","ChordContainer","state","play","type","handleSound","props","currentChord","handleChordVariation","setState","key","this","className","style","width","height","marginBottom","maxWidth","maxHeight","alt","StylesProvider","injectFirst","ButtonGroup","size","color","variant","Button","disabled","index","onClick","React","Component","chordData","App","showDisplay","chords","transform","handleClickNext","newIndex","console","log","prevState","handleClickPrev","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21850529.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Guitar_Chords_-_A_major_1.ca041471.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Guitar_Chords_-_B_major_1.c1dec9e3.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Guitar_Chords_-_C_major_1.53f15357.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Guitar_Chords_-_D_major_1.ac2499ea.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Guitar_Chords_-_E_major_1.c2f26ec1.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Guitar_Chords_-_F_major_1.851a10ae.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Guitar_Chords_-_G_major_1.a1f4fc25.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Guitar_Chords_-_A_minor_1.3bd95706.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Guitar_Chords_-_B_minor_1.519808e6.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Guitar_Chords_-_C_minor_1.8f533b90.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Guitar_Chords_-_D_minor_1.d4f7539d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Guitar_Chords_-_E_minor_1.24583c5d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Guitar_Chords_-_F_minor_1.ba3fc1dc.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Guitar_Chords_-_G_minor_1.ff5c70fe.mp3\";","const chordVar = [\r\n    {\r\n        chord: \"A Minor\",\r\n        // src: \"https://res.cloudinary.com/jester070993/image/upload/v1570678557/guitarChords/aminorGood.jpg\",\r\n        src: \"https://www.chordbank.com/media/am-chord.jpg\",\r\n        id: 0\r\n    },\r\n    {\r\n        chord: \"B Minor\",\r\n        src: \"https://www.chordbank.com/media/how-b-minor-chord-v3@2x.png\",\r\n        id: 1\r\n    },\r\n    {\r\n        chord: \"C Minor\",\r\n        src: \"https://www.chordbank.com/media/cm-hero-750.jpg\",\r\n        id: 2\r\n    },\r\n    {\r\n        chord: \"D Minor\",\r\n        src: \"https://www.chordbank.com/media/dm-hero-750.jpg\",\r\n        id: 3\r\n    },\r\n    {\r\n        chord: \"E Minor\",\r\n        src: \"https://www.chordbank.com/media/em-hero-750.jpg\",\r\n        id: 4\r\n    },\r\n    {\r\n        chord: \"F Minor\",\r\n        src: \"https://res.cloudinary.com/jester070993/image/upload/v1570734996/guitarChords/Capture3.png\",\r\n        id: 5\r\n    },\r\n    {\r\n        chord: \"G Minor\",\r\n        src: \"https://www.chordbank.com/media/gm-hero-750.jpg\",\r\n        id: 6\r\n    },\r\n]\r\n\r\nexport default chordVar","import React from \"react\"\r\n//material UI components for  styling\r\nimport Button from \"@material-ui/core/Button\"\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\"\r\nimport chordVar from \"./variationData\"\r\n\r\nimport { StylesProvider } from \"@material-ui/styles\"\r\n//audio\r\nimport Maj1 from \"./sounds/Guitar_Chords_-_A_major_1.mp3\"\r\nimport Maj2 from \"./sounds/Guitar_Chords_-_B_major_1.mp3\"\r\nimport Maj3 from \"./sounds/Guitar_Chords_-_C_major_1.mp3\"\r\nimport Maj4 from \"./sounds/Guitar_Chords_-_D_major_1.mp3\"\r\nimport Maj5 from \"./sounds/Guitar_Chords_-_E_major_1.mp3\"\r\nimport Maj6 from \"./sounds/Guitar_Chords_-_F_major_1.mp3\"\r\nimport Maj7 from \"./sounds/Guitar_Chords_-_G_major_1.mp3\"\r\n\r\nimport Min1 from \"./sounds/Guitar_Chords_-_A_minor_1.mp3\"\r\nimport Min2 from \"./sounds/Guitar_Chords_-_B_minor_1.mp3\"\r\nimport Min3 from \"./sounds/Guitar_Chords_-_C_minor_1.mp3\"\r\nimport Min4 from \"./sounds/Guitar_Chords_-_D_minor_1.mp3\"\r\nimport Min5 from \"./sounds/Guitar_Chords_-_E_minor_1.mp3\"\r\nimport Min6 from \"./sounds/Guitar_Chords_-_F_minor_1.mp3\"\r\nimport Min7 from \"./sounds/Guitar_Chords_-_G_minor_1.mp3\"\r\n//array of imported src\r\nconst chordsArray = [Maj1, Maj2, Maj3, Maj4, Maj5, Maj6, Maj7]\r\n//array of imported minor src\r\nconst minorChordsArray = [Min1, Min2, Min3, Min4, Min5, Min6, Min7]\r\n//creat new array of HTML Audio elements from chordsArray with src\r\nconst audioArray = chordsArray.map(chord => new Audio(chord))\r\n//creat new array of HTML Audio elements from minorChordsArray with src\r\nconst minorAudioArray  = minorChordsArray.map(chord => new Audio(chord))\r\n\r\nclass ChordContainer extends React.Component{\r\n    state={\r\n        play: true,\r\n        type: false,\r\n        chordVar: chordVar,\r\n    }\r\n    //**pause function not yet working** \r\n\r\n    //click plays the audio for chord  with id  taken from chordData that matches audioArray index\r\n    //plays audio associated with current id of, depending on state of play,  handled thru this.state.type which changes \r\n    //when major/minor button is clicked\r\n    handleSound = () => {\r\n         if (this.state.play){\r\n            audioArray[this.props.currentChord.id].play() \r\n         }\r\n         else { \r\n            minorAudioArray[this.props.currentChord.id].play();\r\n         }\r\n    }\r\n\r\n    //changes state of type and play, which dictates what audio is to be played and the text of the button \r\n    handleChordVariation = () => {\r\n        this.setState({\r\n            type: !this.state.type,\r\n            play: !this.state.play\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div key={this.props.currentChord.id } className={`card cardActive${this.props.currentChord.id}`}>\r\n                <h2 className=\"chordTitle\"> {!this.state.type ? this.props.currentChord.chord : this.state.chordVar[this.props.currentChord.id].chord } </h2>\r\n                <div style={{width: 230, height: 210, marginBottom: 10}}>\r\n                    <img  style={{maxWidth: 230, maxHeight: 206}} alt={(!this.state.type) ? this.props.currentChord.chord :   this.state.chordVar[this.props.currentChord.id].chord } src={ (!this.state.type) ? this.props.currentChord.src : this.state.chordVar[this.props.currentChord.id].src }/>\r\n                </div>\r\n                <StylesProvider injectFirst> \r\n                <ButtonGroup size=\"large\"   color=\"secondary\" variant=\"contained\"> \r\n                    <Button  disabled={this.props.index === this.props.currentChord.id ? false : true} onClick={() => this.handleSound()}>\r\n                        Play Chord\r\n                    </Button>\r\n                    <Button disabled={this.props.index === this.props.currentChord.id ? false : true}\r\n                        onClick={ () => this.handleChordVariation() }>\r\n                        {this.state.type ? \"Major \" : \"Minor\" }\r\n                    </Button>\r\n                </ButtonGroup>\r\n                </StylesProvider>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChordContainer","const chordData = { \r\n      chordData: [\r\n            {\r\n            chord: \"A\",\r\n            id: 0,\r\n            src:\"https://www.chordbank.com/media/a-hero-750.jpg\",\r\n            alt: \"A chord fingering\"\r\n        },\r\n            {\r\n            chord: \"B\",\r\n            id: 1,\r\n            src:\"https://res.cloudinary.com/jester070993/image/upload/v1570734444/guitarChords/Capture.png\",\r\n            alt: \"B chord fingering\"\r\n\r\n        },\r\n            {\r\n            chord: \"C\",\r\n            id: 2,\r\n            src:\"https://www.chordbank.com/media/c-chord.jpg\",\r\n        },\r\n            {\r\n            chord: \"D\",\r\n            id: 3,\r\n            src:\"https://www.chordbank.com/media/d-hero-750.jpg\",\r\n        },\r\n            {\r\n            chord: \"E\",\r\n            id: 4,\r\n            src:\"https://res.cloudinary.com/jester070993/image/upload/v1570734861/guitarChords/Capture1.png\",\r\n        },\r\n            {\r\n            chord: \"F\",\r\n            id: 5,\r\n            src:\"https://www.chordbank.com/media/how-f-major-chord-v1@2x.png\",\r\n        },\r\n            {\r\n            chord: \"G\",\r\n            id: 6,\r\n            src:\"https://www.chordbank.com/media/g-chord.jpg\",\r\n        }\r\n    ]\r\n}\r\n\r\nexport default chordData;","import React from 'react';\n\nimport Button from \"@material-ui/core/Button\"\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\"\n\nimport ChordContainer from \"./components/ChordContainer\"\nimport chordData from \"./components/chordData\"\n\n\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    showDisplay: false,\n    chords: chordData.chordData,\n    currentChord: chordData.chordData[0],\n    disabled: true,\n    transform:  \"\",\n    index: 0\n  }\n\n//   displayChord = (e) =>{\n// console.log(e.target)\n//     this.setState({\n//       showDisplay: true,\n//     })\n//   }\n// translateX = () => {\n//   let transform = this.transform.slice(11, 16)\n//   console.log(transform)\n//   return transform\n// }\n\nhandleClickNext = () => {\n  const newIndex = this.state.currentChord.id + 1 \n  console.log(this.state.index)\n\n  this.setState(prevState => ({\n    currentChord: chordData.chordData[newIndex],\n    transform: `translateX(-${(this.state.currentChord.id + 1 )* 100}%)`,\n    index: prevState.index  + 1\n  }))\n}\n\nhandleClickPrev = () => {\n  const newIndex = this.state.currentChord.id - 1 \n \n  this.setState(prevState => ({\n    currentChord: chordData.chordData[newIndex],\n    transform: `translateX(-${(this.state.currentChord.id * 100) - 100}%)`,\n    index: prevState.index  - 1\n  }))\n}\n\n  render(){ \n    return (\n      <div className=\"App\">\n        <h2 className=\"title\"> Major/Minor Guitar Chords </h2>\n        <div className=\"nextPrevBtn\">\n          <ButtonGroup size=\"large\" color=\"primary\" variant=\"contained\" > \n            <Button onClick={() => {this.handleClickPrev()} } disabled={this.state.currentChord.id === 0}> Previous Chord </Button >\n            <Button onClick={() => this.handleClickNext()}  disabled={this.state.currentChord.id === 6}> Next Chord </Button>\n          </ButtonGroup>\n        </div>\n        <div className={`chordSlider activeSlide activeSlide-${this.state.currentChord.id}`}>\n          <div className=\"chordSliderWrapper\" style={{transform: this.state.transform }}>\n          {this.state.chords.map(chord => (\n                 <ChordContainer  key={chord.id} currentChord={chord} index={this.state.index} />\n          ))}\n          </div>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}